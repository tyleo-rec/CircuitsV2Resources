{
  "Nodes": {
    "98b99011-9be8-43b3-89cc-1e9d55bd8b51": {
      "ReadonlyName": "Absolute Value",
      "Description": "Outputs the magnitude of the number. Is always positive.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Absolute Value",
          "ReadonlyTypeParams": {
            "T": "(float | int)"
          },
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "46ce50b8-0a20-43d2-9646-484ce2a6752c": {
      "ReadonlyName": "Acos",
      "Description": "This chip allows you to use the math formula acos",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Acos",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Trigonometry"
          ]
        }
      ]
    },
    "03461631-734f-491b-ab86-6bdf66947556": {
      "ReadonlyName": "Add Currency",
      "Description": "",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Add Currency",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Run",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Player",
              "ReadonlyType": "Player",
              "Description": ""
            },
            {
              "Name": "Amount",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Run",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "On Add Currency Complete",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Success",
              "ReadonlyType": "bool",
              "Description": ""
            },
            {
              "Name": "Total Balance",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        },
        {
          "FilterPath": [
            "Economy"
          ]
        }
      ]
    },
    "0ccb153c-dd08-4f22-80fd-9d8c5940928c": {
      "ReadonlyName": "Add",
      "Description": "Adds the two input values together.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Add",
          "ReadonlyTypeParams": {
            "T": "(int | float | Vector3)"
          },
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Sum",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        }
      ]
    },
    "3edc785f-46ef-4f30-b101-a07126d3a370": {
      "ReadonlyName": "AI Get Line of Sight Parameters",
      "Description": "Outputs the current line of sight parameters from the input AI",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Get Line of Sight Parameters",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Vision Type",
              "ReadonlyType": "string",
              "Description": ""
            },
            {
              "Name": "Vision Range (m)",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Vision Cone Angle",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Hearing Range (m)",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "1637b250-e497-4f4a-9d5e-64206488391c": {
      "ReadonlyName": "AI Get Target",
      "Description": "Outputs the current combat target of an inputted AI",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Get Target",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Combatant",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "5858a52e-54fb-4bb2-80a0-ec5fce88b3ef": {
      "ReadonlyName": "AI Has Line of Sight To Target",
      "Description": "Outputs if the input AI has line of sight to the input target.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Has Line of Sight To Target",
          "ReadonlyTypeParams": {
            "T": "(AI | Combatant | Rec Room Object | Patrol Point | Player | Vector3)"
          },
          "Inputs": [
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Has LoS",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "b5badf49-acfe-4a42-80e2-5262878e2d89": {
      "ReadonlyName": "AI Look At",
      "Description": "Command an AI to look at the input target. If you want the AI to look in a passed in vector as a direction, set the “Look Target Is Direction” parameter to true. To make an AI stop looking, use the AI Stop Looking node.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Look At",
          "ReadonlyTypeParams": {
            "T": "(AI | Combatant | Rec Room Object | Patrol Point | Player | Vector3)"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            },
            {
              "Name": "Look Target",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Look Target is Direction",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "0e92a7fb-fb38-418c-af39-9afec92112ee": {
      "ReadonlyName": "Variable (AI)",
      "Description": "",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (AI)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "AI",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "AI",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Variables",
            "Objects"
          ]
        },
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "7b05df01-d4c8-490c-9442-55aa3b4975fa": {
      "ReadonlyName": "AI Path To",
      "Description": "Commands the AI to path to the input target destination.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Path To",
          "ReadonlyTypeParams": {
            "T": "(AI | Combatant | Rec Room Object | Patrol Point | Player | Vector3)"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "c2cb2ea2-f663-4aa6-9394-3b741f6b9064": {
      "ReadonlyName": "AI Rotate",
      "Description": "Commands an AI to turn an inputted number of degrees. To command the AI to back to default rotating behavior, use the AI Stop Looking node.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Rotate",
          "ReadonlyTypeParams": {
            "T": "(float | int | Vector3)"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            },
            {
              "Name": "Rotation (degrees)",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "02557d1f-2265-4b6d-8177-92f1802dc106": {
      "ReadonlyName": "AI Set Line of Sight Parameters",
      "Description": "Sets an AI’s various LoS paramters. The “Cone” setting acts like a vision cone that sits in front of AIs like eyes, where the “Circle” setting acts like a radius around the AI. The Require LoS For Targetting parameter defines if AIs can see you through walls.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Set Line of Sight Parameters",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            },
            {
              "Name": "Vision Type (Cone/Circle)",
              "ReadonlyType": "string",
              "Description": ""
            },
            {
              "Name": "Vision Range (m)",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Vision Cone Angle (Cone Type Only)",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Hearing Range (m)",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Require LoS for targeting",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "cd85a0c7-789b-41a2-aeda-40925b73738c": {
      "ReadonlyName": "AI Set Pathing Speed",
      "Description": "Sets the speed for an inputted AI. This same setting can be determined by configuring the AI itself.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Set Pathing Speed",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            },
            {
              "Name": "Speed (m/s)",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "6370b8d9-8c72-4e6b-a623-acb7202a3110": {
      "ReadonlyName": "AI Set Patrol Point",
      "Description": "Set an AIs Path Point.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Set Patrol Point",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            },
            {
              "Name": "Patrol Point",
              "ReadonlyType": "Patrol Point",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "73652899-2656-4aa4-a1b0-4de8d8e56095": {
      "ReadonlyName": "AI Set Target",
      "Description": "Sets the input AI’s current target.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Set Target",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Combatant",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "b169c26e-3c2c-4058-bae7-dbbc3ee856a4": {
      "ReadonlyName": "AI Start Combat Behavior",
      "Description": "RRO Quest AI black box. This node tells the input AI to start their C# defined combat behavior. Note: this behavior varies per AI.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Start Combat Behavior",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "6e244bf2-cf71-4baa-912d-3e61c7fcd1be": {
      "ReadonlyName": "AI Stop Combat Behavior",
      "Description": "Tells the input AI to stop its C# defined combat behavior.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Stop Combat Behavior",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "f211a503-a237-41bc-875e-ae3ef62d745b": {
      "ReadonlyName": "AI Stop Looking",
      "Description": "Command the input AI to cancel its current Rotate and Look At commands. Call this before telling an AI to path after having it Rotate/Look At so it rotates properly while moving again.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "AI Stop Looking",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "AI"
          ]
        }
      ]
    },
    "3fb9fd93-8d45-4395-b9a3-63a99a14442b": {
      "ReadonlyName": "And",
      "Description": "Outputs True only when both inputs are True. If any inputs are False, it outputs False.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "And",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Input",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Logic"
          ]
        }
      ]
    },
    "87f6886f-fa2b-4961-b0ed-c8014aadc56b": {
      "ReadonlyName": "Angular Velocity Add",
      "Description": "",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Angular Velocity Add",
          "ReadonlyTypeParams": {
            "T": "(Vector3 | Quaternion)"
          },
          "Inputs": [
            {
              "Name": "Add Velocity",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            },
            {
              "Name": "Rotation",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Velocity Multiplier",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Max Angular Velocity Applied (deg/s)",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        }
      ]
    },
    "98b24bc7-32d8-4386-9348-d44ad00d7702": {
      "ReadonlyName": "Angular Velocity Set",
      "Description": "",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Angular Velocity Set",
          "ReadonlyTypeParams": {
            "T": "(Vector3 | Quaternion)"
          },
          "Inputs": [
            {
              "Name": "Set Velocity",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            },
            {
              "Name": "Rotation",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Velocity Multiplier",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        }
      ]
    },
    "aaa4e58f-16df-426a-b7a7-a654eab97037": {
      "ReadonlyName": "Asin",
      "Description": "This chip allows you to use the math formula asin",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Asin",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Trigonometry"
          ]
        }
      ]
    },
    "02d62908-550d-4f8b-8bc7-0960fb1b547f": {
      "ReadonlyName": "Atan2",
      "Description": "This chip allows you to use the math formula Atan2",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Atan2",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Y",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "X",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Trigonometry"
          ]
        }
      ]
    },
    "84646ed2-015e-4a8b-9d37-5115cb9ebadc": {
      "ReadonlyName": "Atan",
      "Description": "This chip allows you to use the math formula Atan",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Atan",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Trigonometry"
          ]
        }
      ]
    },
    "80955588-7f7a-4f7c-b46f-6d1e9057fba0": {
      "ReadonlyName": "Variable (bool)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (bool)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Variables",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Logic"
          ]
        }
      ]
    },
    "7adc6ab1-fcab-4746-aec6-006352e29cdc": {
      "ReadonlyName": "If",
      "Description": "Takes a boolean condition as an input. If true, the “then” exec pin fires. If false, the “else” exec pin fires.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "If",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Condition",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Then",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Else",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Control Flow"
          ]
        },
        {
          "FilterPath": [
            "Commonly Used"
          ]
        },
        {
          "FilterPath": [
            "Logic"
          ]
        }
      ]
    },
    "9478334a-451d-4802-bab1-4b05f00d45e4": {
      "ReadonlyName": "Break Tuple",
      "Description": "",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Break Tuple",
          "ReadonlyTypeParams": {
            "T0": "any",
            "T1": "any"
          },
          "Inputs": [
            {
              "Name": "Tuple",
              "ReadonlyType": "(T0, T1)",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Item 0",
              "ReadonlyType": "T0",
              "Description": ""
            },
            {
              "Name": "Item 1",
              "ReadonlyType": "T1",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Utilities"
          ]
        }
      ]
    },
    "fe32ba92-9018-4575-92e2-3b0d82c9419b": {
      "ReadonlyName": "Button Get Is Pressed",
      "Description": "Outputs a target Button's Pressed property.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Button Get Is Pressed",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Button",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Is Pressed",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Button"
          ]
        }
      ]
    },
    "70e7663d-a5fd-435d-8995-942b4babc262": {
      "ReadonlyName": "Button Get Text",
      "Description": "Outputs a target Button's Text property.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Button Get Text",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Button",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Text",
              "ReadonlyType": "string",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Button"
          ]
        }
      ]
    },
    "21bbaa09-6bcf-435c-86da-e853a78bc27b": {
      "ReadonlyName": "Button Set Text",
      "Description": "Sets an input Button's Text property.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Button Set Text",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Button",
              "Description": ""
            },
            {
              "Name": "Text",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Button"
          ]
        }
      ]
    },
    "f4cbc476-bc98-4cbf-bf47-de4baedddf79": {
      "ReadonlyName": "Ceil",
      "Description": "This chip allows you to use the math formula Ceil",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Ceil",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "38b502dc-dd35-4083-a2b0-8a8e5f69a958": {
      "ReadonlyName": "Ceil to Int",
      "Description": "Returns the smallest integer value greater than or equal to the input value.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Ceil to Int",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        },
        {
          "FilterPath": [
            "Conversions"
          ]
        }
      ]
    },
    "14ebde7a-76c0-47df-b0dd-01b1daa50821": {
      "ReadonlyName": "Circuit Board",
      "Description": "Use as a way to encapsulate your logic. You can have as many inputs and outputs as you like. Use the Edit tool to open up the Circuit Board and add nodes inside it to encapsulate the logic. Hit done editing on your Maker Pen to leave the Circuit Board context.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [],
      "NodeFilters": [
        {
          "FilterPath": [
            "Utilities"
          ]
        }
      ]
    },
    "c0ee02f4-bbab-40ea-88a0-7441d7e7094c": {
      "ReadonlyName": "Combatant Get Ground Position",
      "Description": "Outputs the ground position of an input combatant",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Combatant Get Ground Position",
          "ReadonlyTypeParams": {
            "T": "(AI | Combatant | Player)"
          },
          "Inputs": [
            {
              "Name": "Combatant",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Ground Position",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Combatant"
          ]
        }
      ]
    },
    "3967a8ad-4237-4ae7-8cbf-850d8e24fe30": {
      "ReadonlyName": "Combatant Get Health",
      "Description": "Outputs the Health property of the input combatant.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Combatant Get Health",
          "ReadonlyTypeParams": {
            "T": "(AI | Combatant | Player)"
          },
          "Inputs": [
            {
              "Name": "Object",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Health",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Shield",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Max Health",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": []
    },
    "2a12c389-c3c6-4484-8c63-21cdaf0fac6c": {
      "ReadonlyName": "Combatant Get Is Alive",
      "Description": "Outputs true if the input combatant is alive.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Combatant Get Is Alive",
          "ReadonlyTypeParams": {
            "T": "(AI | Combatant | Player)"
          },
          "Inputs": [
            {
              "Name": "Object",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Is Alive",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Combatant"
          ]
        }
      ]
    },
    "b4eadbfa-cdbe-42e6-9481-5197de58e272": {
      "ReadonlyName": "Combatant Get Velocity",
      "Description": "Outputs the input combatant's current velocity and speed.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Combatant Get Velocity",
          "ReadonlyTypeParams": {
            "T": "(AI | Combatant | Player)"
          },
          "Inputs": [
            {
              "Name": "Combatant",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Velocity",
              "ReadonlyType": "Vector3",
              "Description": ""
            },
            {
              "Name": "Speed",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Combatant"
          ]
        }
      ]
    },
    "cfd8e246-8682-4707-a0ae-da55bacfbf72": {
      "ReadonlyName": "Variable (Combatant)",
      "Description": "",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (Combatant)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "Combatant",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "Combatant",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Variables",
            "Objects"
          ]
        },
        {
          "FilterPath": [
            "Objects",
            "Combatant"
          ]
        }
      ]
    },
    "67aca89c-f753-4f94-87df-1ce1d4fcb8b0": {
      "ReadonlyName": "Combatant Receive Damage",
      "Description": "Deals damage to the given target combatant with various parameters.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Combatant Receive Damage",
          "ReadonlyTypeParams": {
            "T": "(AI | Combatant | Player)",
            "U": "(AI | Combatant | Player)"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Damage",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Ignore Shield",
              "ReadonlyType": "bool",
              "Description": ""
            },
            {
              "Name": "Damage Source (Combatant)",
              "ReadonlyType": "U",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Combatant"
          ]
        }
      ]
    },
    "3dc4807f-2acd-446d-928f-5d301d0795d6": {
      "ReadonlyName": "Combatant Set Health",
      "Description": "Sets the Health property of an input combatant.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Combatant Set Health",
          "ReadonlyTypeParams": {
            "T": "(AI | Combatant | Player)"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Health",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Combatant"
          ]
        }
      ]
    },
    "82f71bcc-5e83-4825-8306-6a2bb2a296dd": {
      "ReadonlyName": "Combatant Set Max Health",
      "Description": "Sets the Max Health property of the input combatant.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Combatant Set Max Health",
          "ReadonlyTypeParams": {
            "T": "(AI | Combatant | Player)"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Max Health",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Combatant"
          ]
        }
      ]
    },
    "81b08e44-0a1e-40da-b8a1-79f416691dcf": {
      "ReadonlyName": "Combatant Split",
      "Description": "Splits the input Combatant into Player and AI types. Use this off of Combatant outputs to directly access the Player or AI.",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Combatant Split",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Combatant",
              "ReadonlyType": "Combatant",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Is Player",
              "ReadonlyType": "bool",
              "Description": ""
            },
            {
              "Name": "Player",
              "ReadonlyType": "Player",
              "Description": ""
            },
            {
              "Name": "AI",
              "ReadonlyType": "AI",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Combatant"
          ]
        }
      ]
    },
    "e8659a59-9e11-4403-8bbc-f4a3961cbf21": {
      "ReadonlyName": "Cos",
      "Description": "This chip allows you to use the math formula Cos",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Cos",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Trigonometry"
          ]
        }
      ]
    },
    "81939b0e-428f-481c-9fba-453b4c84f01e": {
      "ReadonlyName": "Rec Room Object Add Tags",
      "Description": "Assigns tags to the input object.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rec Room Object Add Tags",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            },
            {
              "Name": "Tags",
              "ReadonlyType": "List<string>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rec Room Object"
          ]
        }
      ]
    },
    "02d69553-ae96-4c2d-8477-59ada6a66783": {
      "ReadonlyName": "Rec Room Object Get All with Tag",
      "Description": "Searches the room for all objects with a specified tag. Outputs all objects with the input tag in a list.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rec Room Object Get All with Tag",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Tag",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Objects with Tag",
              "ReadonlyType": "List<Rec Room Object>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rec Room Object"
          ]
        }
      ]
    },
    "9e51fcdc-87b4-4eee-a7b1-8d6f86a5fa6b": {
      "ReadonlyName": "Rec Room Object Get Authority",
      "Description": "Outputs the authority player of the input RecRoomObject",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rec Room Object Get Authority",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rec Room Object"
          ]
        },
        {
          "FilterPath": [
            "Networking"
          ]
        }
      ]
    },
    "b0497de0-3dd3-470d-a421-8f0d321bfc3e": {
      "ReadonlyName": "Rec Room Object Get Is Local Player Authority",
      "Description": "Outputs true on the player's machine who has authority of the input.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rec Room Object Get Is Local Player Authority",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Networking"
          ]
        }
      ]
    },
    "a76a9898-4add-4765-9f5b-f366b586e51c": {
      "ReadonlyName": "Get Player Last Equipped Object",
      "Description": "Returns the player who last held an object",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Player Last Equipped Object",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Object",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Player",
              "ReadonlyType": "Player",
              "Description": ""
            },
            {
              "Name": "Currently Equipped",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rec Room Object"
          ]
        },
        {
          "FilterPath": [
            "Player",
            "Equipment"
          ]
        }
      ]
    },
    "e67cfcb7-03e8-4152-ba41-af8ca61d93fb": {
      "ReadonlyName": "Rec Room Object Get Tags",
      "Description": "Outputs list of tags the input object has.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rec Room Object Get Tags",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Tags",
              "ReadonlyType": "List<string>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rec Room Object"
          ]
        }
      ]
    },
    "bc3011d2-c085-490e-a450-195ff3a27009": {
      "ReadonlyName": "Rec Room Object Has Tag",
      "Description": "Outputs true if the input object has the input tag.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rec Room Object Has Tag",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Object",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            },
            {
              "Name": "Tag",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Has Tag",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rec Room Object"
          ]
        }
      ]
    },
    "7077d139-9876-495e-9756-58150fef9f3b": {
      "ReadonlyName": "Variable (RecRoomObject)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Variable (RecRoomObject)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Variables",
            "Objects"
          ]
        },
        {
          "FilterPath": [
            "Objects",
            "Rec Room Object"
          ]
        }
      ]
    },
    "fb368814-daaf-475f-ae08-1d01b9d63b8e": {
      "ReadonlyName": "Rec Room Object Remove Tags",
      "Description": "Removes the input list of tags from the input object.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rec Room Object Remove Tags",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            },
            {
              "Name": "Tags",
              "ReadonlyType": "List<string>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rec Room Object"
          ]
        }
      ]
    },
    "cefee2a5-d4a8-4dff-8c4e-bad684ca8d34": {
      "ReadonlyName": "Delay",
      "Description": "Fires outputs based on the inputted time to delay. The Run exec fires as soon as the node is executed. The After Delay exec fires once the input delay duration has completed. After Canceled fires after the delay node’s Cancel exec has been fired. Cancel cancels all current delays running from this node.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Delay",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Run",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Delay (s)",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Cancel",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Run",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "After Delay",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Cancel",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Time"
          ]
        },
        {
          "FilterPath": [
            "Commonly Used"
          ]
        }
      ]
    },
    "c1fdc4fa-fcb4-4ea4-b505-7b1d15fb8117": {
      "ReadonlyName": "Dice Get Player Rolled",
      "Description": "Returns the player who rolled the dice",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Dice Get Player Rolled",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Die",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Player",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Dice"
          ]
        }
      ]
    },
    "c80e2979-c672-4e7a-81fb-0ed1964e3ea6": {
      "ReadonlyName": "Dice Get Result",
      "Description": "Returns the result of the dice",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Dice Get Result",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Die",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Dice"
          ]
        }
      ]
    },
    "b8735ad9-cd89-4d81-ab9b-be3eb50e3b5a": {
      "ReadonlyName": "Dice Get Roll finished",
      "Description": "Outputs an exec when the dice finished rolling",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Dice Get Roll finished",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Die",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Roll Finished",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Dice"
          ]
        }
      ]
    },
    "182e1ae2-1183-4741-af6e-f307b788a857": {
      "ReadonlyName": "Distance",
      "Description": "Outputs the distance between the input objects.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Distance",
          "ReadonlyTypeParams": {
            "T1": "(AI | Combatant | Rec Room Object | Patrol Point | Player | Vector3)",
            "T2": "(AI | Combatant | Rec Room Object | Patrol Point | Player | Vector3)"
          },
          "Inputs": [
            {
              "Name": "A",
              "ReadonlyType": "T1",
              "Description": ""
            },
            {
              "Name": "B",
              "ReadonlyType": "T2",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Distance",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        },
        {
          "FilterPath": [
            "Physics"
          ]
        }
      ]
    },
    "f2eafd78-5f23-44c9-a271-8ff2f0762e71": {
      "ReadonlyName": "Divide",
      "Description": "Find how many times a value contains another.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Divide",
          "ReadonlyTypeParams": {
            "T": "(int | float | Vector3)"
          },
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Quotient",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        }
      ]
    },
    "15e42063-cbae-40f9-a9e4-8226e83217ec": {
      "ReadonlyName": "Emitter Set Color",
      "Description": "Sets the color for the particles emitted",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Emitter Set Color",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Emitter",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Emitter"
          ]
        }
      ]
    },
    "36881bd0-7da0-44a7-b6ef-8cd3770fed78": {
      "ReadonlyName": "Emitter Set Looping",
      "Description": "Makes the emitter emit continuously",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Emitter Set Looping",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Emitter",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Emitter"
          ]
        }
      ]
    },
    "1fdf4bab-c868-4ffb-8bfc-b2e360450495": {
      "ReadonlyName": "Emitter Set Size",
      "Description": "Sets the size of the particles emitted",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Emitter Set Size",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Emitter",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Emitter"
          ]
        }
      ]
    },
    "12446960-d971-475f-b64e-b5c7bb422eca": {
      "ReadonlyName": "Emitter Set Speed",
      "Description": "Sets the speed particles are emitted",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Emitter Set Speed",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Emitter",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Emitter"
          ]
        }
      ]
    },
    "56ebaa0b-256a-40ed-a066-f5663dfa2b59": {
      "ReadonlyName": "Emitter Start",
      "Description": "Starts emitting particles",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Emitter Start",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Emitter",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Emitter"
          ]
        }
      ]
    },
    "23b278c4-5d3d-439d-afa3-ff30c949df97": {
      "ReadonlyName": "Emitter Stop",
      "Description": "Stops emitting particles",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Emitter Stop",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Emitter",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Emitter"
          ]
        }
      ]
    },
    "3663225d-e18d-40e6-a234-ef10378528be": {
      "ReadonlyName": "Equals",
      "Description": "Compares the two inputted values and outputs true if they are the same. False if they are different.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Equals",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "A",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "B",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Equals",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Logic"
          ]
        },
        {
          "FilterPath": [
            "Commonly Used"
          ]
        }
      ]
    },
    "7d72a1fa-a434-4437-a73a-51f306a3f55f": {
      "ReadonlyName": "Event Definition",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Event Definition",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": []
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Commonly Used"
          ]
        },
        {
          "FilterPath": [
            "Events"
          ]
        }
      ]
    },
    "8b533ccb-643a-491d-982c-94417ce99954": {
      "ReadonlyName": "Event Receiver",
      "Description": "Events are the entry points for all circuit graphs. Events are execution hooks for things like a player loading into the room, or knowing when a Button is pressed. After creating this chip, make sure to use the configure tool to choose the event you want to listen for. You can use the Event Defintion chip to create your own events to add to this list and use with the Event Sender chip.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Event Receiver",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Events"
          ]
        },
        {
          "FilterPath": [
            "Commonly Used"
          ]
        }
      ]
    },
    "96a8fe50-bc37-458b-bac9-582d45314779": {
      "ReadonlyName": "Event Sender",
      "Description": "Use the Event Sender to fire your custom events defined in Event Defintions. After creating this chip, make sure to use the configure tool to change the event that you want to fire. You can also change who you want to send the event to from the config menu.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Event Sender",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Events"
          ]
        },
        {
          "FilterPath": [
            "Commonly Used"
          ]
        }
      ]
    },
    "04a31ca5-91d2-4a69-bf3d-484d18411cc0": {
      "ReadonlyName": "Variable (float)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (float)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Variables",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "c90d9339-cdce-4d22-a885-f142fd5567ab": {
      "ReadonlyName": "Floor",
      "Description": "Returns the smallest value less than or equal to the input value.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Floor",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "bc451cab-2292-4e60-832d-31060eb82bd0": {
      "ReadonlyName": "Floor to Int",
      "Description": "Returns the smallest integer value less than or equal to the input value.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Floor to Int",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        },
        {
          "FilterPath": [
            "Conversions"
          ]
        }
      ]
    },
    "744e5311-6cc7-4130-962e-fe050a475d43": {
      "ReadonlyName": "For Each",
      "Description": "Iterates over the input list. The loop exec fires for each element in the list. The Done exec fires once the end of the list has been reached.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "For Each",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Items",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Loop",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Item",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Done",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Control Flow"
          ]
        }
      ]
    },
    "8f945c22-988b-45d2-b7f2-409ba304fef4": {
      "ReadonlyName": "For",
      "Description": "Iterates over the “From” pin (inclusive) to the “To” pin (exclusive)",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "For",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "From (Inclusive)",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "To (Exclusive)",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Loop",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Index",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Done",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Control Flow"
          ]
        }
      ]
    },
    "7ff685a6-f59c-4c6c-b559-f343d81ea1d4": {
      "ReadonlyName": "From Rec Room Object",
      "Description": "Converts the input Rec Room Object to the object's subtype.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "From Rec Room Object",
          "ReadonlyTypeParams": {
            "T": "Rec Room Object"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rec Room Object"
          ]
        },
        {
          "FilterPath": [
            "Conversions"
          ]
        }
      ]
    },
    "09b0bf5b-95df-474b-b81a-4e8e2c78ed0a": {
      "ReadonlyName": "Get All Players",
      "Description": "Outputs a list of all the players in the room currently.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get All Players",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": [
            {
              "Name": "Players",
              "ReadonlyType": "List<Player>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "eaf712f8-3257-4415-9f88-ae94e308396e": {
      "ReadonlyName": "Get Authority",
      "Description": "Gets the authority player of the chip's current context.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Authority",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Networking"
          ]
        }
      ]
    },
    "a4b0c860-e7f0-4abf-ad7c-9be1805c3d01": {
      "ReadonlyName": "Get Currency Balance",
      "Description": "",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Currency Balance",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Run",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Player",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Run",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "On Get Balance Complete",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Success",
              "ReadonlyType": "bool",
              "Description": ""
            },
            {
              "Name": "Total Balance",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        },
        {
          "FilterPath": [
            "Economy"
          ]
        }
      ]
    },
    "e8c5082f-0a75-4025-9679-293bc8d72989": {
      "ReadonlyName": "Get Element",
      "Description": "Gets a specified element from the input list. The element you want to retrieve is called the “index” and is the location of the element in the list. The first element in the list is at index 0, the second element is at index 1.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Element",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "List",
              "ReadonlyType": "List<T>",
              "Description": ""
            },
            {
              "Name": "Index",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Core"
          ]
        }
      ]
    },
    "d46f6fdc-480c-41e6-9a27-87fadb0ab0fc": {
      "ReadonlyName": "Time Get Universal Seconds",
      "Description": "Gets the amount of seconds since 1970",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Time Get Universal Seconds",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Time"
          ]
        }
      ]
    },
    "88f95338-d1a6-4fad-8424-d714d651f6ac": {
      "ReadonlyName": "Get Forward Vector",
      "Description": "Gets the forward of the target, output as a vector3.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Forward Vector",
          "ReadonlyTypeParams": {
            "T": "(Rec Room Object | Player)"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        },
        {
          "FilterPath": [
            "Objects"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "0493204d-9815-49a9-8c87-4dedf5ccf7e8": {
      "ReadonlyName": "List Get Count",
      "Description": "Outputs the number of elements inside the input list.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Get Count",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "List",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Count",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Core"
          ]
        }
      ]
    },
    "70c830bb-223a-4a7c-b0ae-df240c6f1f33": {
      "ReadonlyName": "Get Local Camera Forward",
      "Description": "Gets the direction your avatar is looking, output as a vector3.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Local Camera Forward",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "912f0e1b-267d-4424-8002-3f82a2d835fe": {
      "ReadonlyName": "Get Local Camera Rotation",
      "Description": "Gets the rotation of your avatar's view, output as a quaternion.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Local Camera Rotation",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": [
            {
              "Name": "Quaternion",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "5d9da95f-a64f-4660-a11f-bf0855769659": {
      "ReadonlyName": "Get Local Camera Up",
      "Description": "Gets the up direction from the local player's camera, output as a vector3.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Local Camera Up",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "fdf733a8-bdd6-4800-b1d4-95b06b3d6f02": {
      "ReadonlyName": "Get Local Player",
      "Description": "Outputs the player running this chip on their machine.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Local Player",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        },
        {
          "FilterPath": [
            "Networking"
          ]
        }
      ]
    },
    "c453fa47-d0db-4c4a-a6a1-dac4ebad0aca": {
      "ReadonlyName": "Get Rotation",
      "Description": "Outputs the rotation of the target as a quaternion.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Rotation",
          "ReadonlyTypeParams": {
            "T": "(Rec Room Object | Player)"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Quaternion",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        },
        {
          "FilterPath": [
            "Objects"
          ]
        }
      ]
    },
    "6141ff64-412b-452f-beb0-f338eb6abfb5": {
      "ReadonlyName": "Get Player Account Name",
      "Description": "Outputs the player's Account name (e.g Coach) in a form of a string",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Player Account Name",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Player",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Player Name",
              "ReadonlyType": "string",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "2ee5a268-9d44-4326-8a34-ad126a3218f2": {
      "ReadonlyName": "Get Player By Account Name",
      "Description": "Gets the player value type based by their Account Name (e.g My Account name is Coach and if I input my Account Name in the form of a string, The output would be my player value type.)",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Player By Account Name",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Name",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Player",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "637e07e4-9b93-44b6-bba3-68966080d064": {
      "ReadonlyName": "Get Player By Display Name",
      "Description": "Gets the a player value type based by their Display Name (e.g My Display Name is Coach and if I input a sting Coach, The output would be my player value type)",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Player By Display Name",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Name",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Player",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "1c0a6bd4-bcac-40a9-8bae-fceff7ff7cff": {
      "ReadonlyName": "Get Players With Role",
      "Description": "Outpus a player value type list that continues every player with a certain role",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Players With Role",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Role Name",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Players",
              "ReadonlyType": "List<Player>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "a8c52ef2-17bf-47e6-9084-3e5623584b48": {
      "ReadonlyName": "Get Position",
      "Description": "Outputs the position of the input object as a vector3.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Position",
          "ReadonlyTypeParams": {
            "T": "(AI | Combatant | Rec Room Object | Player)"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Position",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        },
        {
          "FilterPath": [
            "Objects"
          ]
        }
      ]
    },
    "8722445f-e552-4d4a-bced-8afa63bbf70b": {
      "ReadonlyName": "Time Get Precise Seconds",
      "Description": "Gets the amount of seconds since a player launched Rec Room",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Time Get Precise Seconds",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Time"
          ]
        }
      ]
    },
    "d7557465-963e-4451-a55a-dea2050e9b74": {
      "ReadonlyName": "Get Room Authority",
      "Description": "Returns the player who is the room Authority player.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Room Authority",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Networking"
          ]
        }
      ]
    },
    "830f781d-2522-4ec0-9d6f-ecfc0bf695f6": {
      "ReadonlyName": "Get Up Vector",
      "Description": "Outputs the up direction of the input target, output as a vector3.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Up Vector",
          "ReadonlyTypeParams": {
            "T": "(Rec Room Object | Player)"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        },
        {
          "FilterPath": [
            "Objects"
          ]
        }
      ]
    },
    "f33e3fb6-79f1-43da-93c1-553d022b9f37": {
      "ReadonlyName": "Time Get Universal Time",
      "Description": "Gets the UTC time zone Time.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Time Get Universal Time",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": [
            {
              "Name": "Year",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Month",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Day",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Hour",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Minute",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Second",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Time"
          ]
        }
      ]
    },
    "e9c65fbe-9d0f-4373-bd45-fe620de801b4": {
      "ReadonlyName": "Get Velocity",
      "Description": "Returns the velocity of a Player or a Rec Room Object.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Get Velocity",
          "ReadonlyTypeParams": {
            "T": "(Rec Room Object | Player)"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Velocity",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        },
        {
          "FilterPath": [
            "Objects"
          ]
        }
      ]
    },
    "110c29b1-ac90-4a71-b3c0-53372aa134bc": {
      "ReadonlyName": "Greater Than",
      "Description": "Returns true if input A is greater than input B",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Greater Than",
          "ReadonlyTypeParams": {
            "T": "(int | float)"
          },
          "Inputs": [
            {
              "Name": "A",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "B",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Logic"
          ]
        }
      ]
    },
    "a10e7788-f016-4390-a68e-87d93b47edb1": {
      "ReadonlyName": "Greater or Equal",
      "Description": "Returns true if input A is greater or equal than input B",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Greater or Equal",
          "ReadonlyTypeParams": {
            "T": "(int | float)"
          },
          "Inputs": [
            {
              "Name": "A",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "B",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Logic"
          ]
        }
      ]
    },
    "a4f8a9a1-fd7b-4702-8345-93ae4d57f333": {
      "ReadonlyName": "If Expression",
      "Description": "Outputs an input value based on the input conditional. Outputs the “then” input if the inputted conditional is true. Outputs the “else” input if the input conditional is false.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "If Expression",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "If",
              "ReadonlyType": "bool",
              "Description": ""
            },
            {
              "Name": "Then",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Else",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Control Flow"
          ]
        }
      ]
    },
    "b8b667b9-7b55-4b8d-b116-abef220777e2": {
      "ReadonlyName": "If Local Player Is Authority",
      "Description": "I'm Authority exec fires on the player's machine who has authority in the current context. At the room level, this is room authority, inside an object board, this is object authority. I'm Not Authority exec fires for everyone else.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "If Local Player Is Authority",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "I'm Authority",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "I'm Not Authority",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Networking"
          ]
        }
      ]
    },
    "5e28057f-214b-4ff8-81bc-512be207c9d7": {
      "ReadonlyName": "If Local Player Is Room Authority",
      "Description": "I'm Authority exec fires on the player's machine who has authority over the room. I'm Not Authority exec fires for everyone else.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "If Local Player Is Room Authority",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "I'm Authority",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "I'm Not Authority",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Networking"
          ]
        }
      ]
    },
    "6d69bee8-0d77-4d5f-bf35-9794eaaabe81": {
      "ReadonlyName": "If Local Player Should Run",
      "Description": "The \"Should Run\" port will exec If the input player is local or if input player is authority over the current context (prefers if the player is local).",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "If Local Player Should Run",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Acting Player",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Should Run",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Should Not Run",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Networking"
          ]
        }
      ]
    },
    "c7643011-f320-4155-89b8-d693730c1935": {
      "ReadonlyName": "If Player Is Local",
      "Description": "Outputs if a player is the local player or not.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "If Player Is Local",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Player",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Is Local",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Is Not Local",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Networking"
          ]
        }
      ]
    },
    "1b5eca75-0e7e-4aff-8adc-c5e043cac29e": {
      "ReadonlyName": "Velocity Add",
      "Description": "Adds velocity to the input target. The input velocity will be multiplied by the magnitude of the vector provided in the input direction.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Velocity Add",
          "ReadonlyTypeParams": {
            "T": "(Player | Rec Room Object)"
          },
          "Inputs": [
            {
              "Name": "Add Velocity",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Speed (m/s)",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Direction",
              "ReadonlyType": "Vector3",
              "Description": ""
            },
            {
              "Name": "Maximum Speed (m/s)",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        },
        {
          "FilterPath": [
            "Objects"
          ]
        }
      ]
    },
    "f0137efc-b3b7-4217-ba8b-1d2e78d451bd": {
      "ReadonlyName": "Velocity Reflect",
      "Description": "The input target's velocity parallel to the input direction vector is reflected along the input direction and velocities perpendicular to it, are maintained. The input velocity will be multiplied by the magnitude of the vector provided in the input direction.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Velocity Reflect",
          "ReadonlyTypeParams": {
            "T": "(Player | Rec Room Object)"
          },
          "Inputs": [
            {
              "Name": "Reflect Velocity",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Additional Speed (m/s)",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Speed Multiplier",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Direction",
              "ReadonlyType": "Vector3",
              "Description": ""
            },
            {
              "Name": "Maximum Speed (m/s)",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        },
        {
          "FilterPath": [
            "Objects"
          ]
        }
      ]
    },
    "f97c530d-03bf-498c-8854-33e814d2600b": {
      "ReadonlyName": "Velocity Set",
      "Description": "Momentarily sets the velocity of the input target in the input direction. The input velocity will be multiplied by the magnitude of the vector provided in the input direction.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Velocity Set",
          "ReadonlyTypeParams": {
            "T": "(Player | Rec Room Object)"
          },
          "Inputs": [
            {
              "Name": "Set Velocity",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Speed (m/s)",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Direction",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Physics"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        },
        {
          "FilterPath": [
            "Objects"
          ]
        }
      ]
    },
    "33224907-68ff-4102-802e-7c3eed481d37": {
      "ReadonlyName": "Variable (int)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (int)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Variables",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "65cfba8a-b5dc-4946-b824-e6efc5719f3a": {
      "ReadonlyName": "Int to Float",
      "Description": "Converts the input int to a float.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Int to Float",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        },
        {
          "FilterPath": [
            "Conversions"
          ]
        }
      ]
    },
    "24a1be50-ef1b-4e54-836b-4a2a95780b4e": {
      "ReadonlyName": "Is Valid",
      "Description": "Returns true if the input variable is not null. Certain variable types must be set before use because they can't have a default value. A Rec Room Object variable that isn't set isn't going to be valid.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Is Valid",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Is Valid",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Utilities"
          ]
        }
      ]
    },
    "91b0ffa8-4eb1-4a30-aaf3-7a049071cb42": {
      "ReadonlyName": "Lerp",
      "Description": "This chip allows you to use the math formula Lerp",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Lerp",
          "ReadonlyTypeParams": {
            "T": "(float | Quaternion | Vector3)"
          },
          "Inputs": [
            {
              "Name": "Start",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "End",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Progress",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        }
      ]
    },
    "7e58b3f4-2694-4ced-b3a8-0fe23f48f60f": {
      "ReadonlyName": "Less Than",
      "Description": "Returns true if input A is less than input B.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Less Than",
          "ReadonlyTypeParams": {
            "T": "(int | float)"
          },
          "Inputs": [
            {
              "Name": "A",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "B",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Logic"
          ]
        }
      ]
    },
    "a027073f-9189-457f-a53d-8562e8829daf": {
      "ReadonlyName": "Less or Equal",
      "Description": "Returns true if input A is less than or equal to input B.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Less or Equal",
          "ReadonlyTypeParams": {
            "T": "(int | float)"
          },
          "Inputs": [
            {
              "Name": "A",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "B",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Logic"
          ]
        }
      ]
    },
    "873d8765-9dc7-41ea-87ef-dd6e32119af8": {
      "ReadonlyName": "Light Set Angle",
      "Description": "Sets the size of the spotlight's area",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Light Set Angle",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Light",
              "Description": ""
            },
            {
              "Name": "Angle",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Light"
          ]
        }
      ]
    },
    "2b6d9368-2ddc-41fb-ac14-b1a3561b19fc": {
      "ReadonlyName": "Light Set Color",
      "Description": "Sets the color for a point light or a spotlight",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Light Set Color",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Light",
              "Description": ""
            },
            {
              "Name": "Color",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Light"
          ]
        }
      ]
    },
    "902a47c8-3834-4858-bbae-5357281a507d": {
      "ReadonlyName": "Light Set Intensity",
      "Description": "Sets the brightness level for a point light or a spotlight",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Light Set Intensity",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Light",
              "Description": ""
            },
            {
              "Name": "Intensity",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Light"
          ]
        }
      ]
    },
    "c3d0ef1f-921c-4602-a6eb-b03ed46d556f": {
      "ReadonlyName": "Light Set Range",
      "Description": "Sets the range of a point light or a spotlight",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Light Set Range",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Light",
              "Description": ""
            },
            {
              "Name": "Range",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Light"
          ]
        }
      ]
    },
    "0f96406e-af69-4f6c-a430-c6b004457ef4": {
      "ReadonlyName": "Light Turn Off",
      "Description": "Turns off the point light or the spotlight",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Light Turn Off",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Light",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Light"
          ]
        }
      ]
    },
    "5452c480-62f9-4d4e-b615-0f59e645d8db": {
      "ReadonlyName": "Light Turn On",
      "Description": "Turns on the point light or the spotlight",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Light Turn On",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Light",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Light"
          ]
        }
      ]
    },
    "f716c3f3-0c7c-42a4-bf55-12b7e1cd9040": {
      "ReadonlyName": "List Add",
      "Description": "Adds a new element to the end of the target list containing the input value.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Add",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "List<T>",
              "Description": ""
            },
            {
              "Name": "Item",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Core"
          ]
        }
      ]
    },
    "7d474bd7-ee53-4e6d-a45f-cd64fce1c0dc": {
      "ReadonlyName": "List All True",
      "Description": "If all of the bool values in the list are true then return ture",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List All True",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "List<bool>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Logic"
          ]
        },
        {
          "FilterPath": [
            "Logic",
            "Lists"
          ]
        }
      ]
    },
    "f9589495-685e-4e14-af2e-5cd45f860021": {
      "ReadonlyName": "List Any True",
      "Description": "If any bool value in the list is true then return ture",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Any True",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "List<bool>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Logic"
          ]
        },
        {
          "FilterPath": [
            "Logic",
            "Lists"
          ]
        }
      ]
    },
    "e0ef8c83-e5a6-4272-a102-07bfc0a40fd5": {
      "ReadonlyName": "Variable (List<bool>)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (List<bool>)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<bool>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<bool>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Variables",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Variables",
            "Lists",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Logic",
            "Lists"
          ]
        },
        {
          "FilterPath": [
            "Lists",
            "Logic"
          ]
        }
      ]
    },
    "0e2f21e0-bc71-423a-a983-72e27193ca8b": {
      "ReadonlyName": "List Concat",
      "Description": "Combine lists together into one list",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Concat",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "List 1",
              "ReadonlyType": "List<T>",
              "Description": ""
            },
            {
              "Name": "List 2",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Core"
          ]
        }
      ]
    },
    "73f261e2-d65d-4607-858d-3f4c37c76963": {
      "ReadonlyName": "List Contains",
      "Description": "Outputs true if the target list contains the input value.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Contains",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "List<T>",
              "Description": ""
            },
            {
              "Name": "Item",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Core"
          ]
        }
      ]
    },
    "536e376c-087d-4909-9412-3fcee5d6f52b": {
      "ReadonlyName": "Variable (List<Rec Room Object>)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (List<RecRoomObject>)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<Rec Room Object>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<Rec Room Object>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Variables",
            "Objects"
          ]
        },
        {
          "FilterPath": [
            "Variables",
            "Lists",
            "Objects"
          ]
        },
        {
          "FilterPath": [
            "Objects",
            "Rec Room Object"
          ]
        }
      ]
    },
    "7e5af908-533d-4d42-b3c9-0159e2b5fd55": {
      "ReadonlyName": "List Divide",
      "Description": "Divides each element in the list by the next element.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Divide",
          "ReadonlyTypeParams": {
            "T": "(float | int | Vector3)"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Math"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Lists"
          ]
        }
      ]
    },
    "9bcd36e6-c293-432a-8d90-f6391fe06c62": {
      "ReadonlyName": "Variable (List<float>)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (List<float>)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<float>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<float>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Variables",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Variables",
            "Lists",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Lists"
          ]
        }
      ]
    },
    "592c8aab-9489-492f-a4aa-1e558e6a8ce7": {
      "ReadonlyName": "List Insert",
      "Description": "Insert a new element into the target list at the input index. The new element contains the input value.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Insert",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "List<T>",
              "Description": ""
            },
            {
              "Name": "Item",
              "ReadonlyType": "T",
              "Description": ""
            },
            {
              "Name": "Index",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Core"
          ]
        }
      ]
    },
    "fe2f9c12-d213-4234-a387-9d2ec1ad7fc1": {
      "ReadonlyName": "Variable (List<int>)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (List<int>)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<int>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<int>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Variables",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Variables",
            "Lists",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Lists"
          ]
        }
      ]
    },
    "47428133-4492-422a-aeab-82c21667543e": {
      "ReadonlyName": "List Max",
      "Description": "Outputs the highest value in the target list.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Max",
          "ReadonlyTypeParams": {
            "T": "(float | int)"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Math"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Lists"
          ]
        }
      ]
    },
    "73e9cc79-66cc-4526-8ed7-87500e208c6b": {
      "ReadonlyName": "List Min",
      "Description": "Outputs the lowest value in the target list.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Min",
          "ReadonlyTypeParams": {
            "T": "(float | int)"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Math"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Lists"
          ]
        }
      ]
    },
    "585aebe5-5df3-423a-8bc4-66b4e2b8bc5b": {
      "ReadonlyName": "List Multiply",
      "Description": "Multiplies each element in the list by the next element.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Multiply",
          "ReadonlyTypeParams": {
            "T": "(float | int | Quaternion | Vector3)"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Math"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Lists"
          ]
        }
      ]
    },
    "32837e14-12de-465f-89dc-ceddb64cdd6c": {
      "ReadonlyName": "Variable (List<Player>)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (List<Player>)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<Player>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<Player>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Variables",
            "Objects"
          ]
        },
        {
          "FilterPath": [
            "Variables",
            "Lists",
            "Objects"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "e8cfde19-33a4-4826-a032-4b9bd50aa171": {
      "ReadonlyName": "Variable (List<Quaternion>)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (List<Quaternion>)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<Quaternion>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<Quaternion>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Variables",
            "Primitives"
          ]
        }
      ]
    },
    "02774487-d41a-4b59-9aa9-2aeb0aad9e37": {
      "ReadonlyName": "List Remove At",
      "Description": "Remove an element in the target list at the input index.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Remove At",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "List<T>",
              "Description": ""
            },
            {
              "Name": "Index",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Core"
          ]
        }
      ]
    },
    "2687fb17-96ea-4106-94d7-be8854cfa978": {
      "ReadonlyName": "List Remove Last",
      "Description": "Removes the last element in a list.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Remove Last",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Core"
          ]
        }
      ]
    },
    "94fb596f-6b3f-4981-bc2d-1bb693c45ae6": {
      "ReadonlyName": "Variable (List<string>)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (List<string>)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<string>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<string>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Variables",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Variables",
            "Lists",
            "Primitives"
          ]
        }
      ]
    },
    "20f069cb-30e5-4df8-8e2f-d91f322a83dd": {
      "ReadonlyName": "List Subtract",
      "Description": "Subtracts each element in the list by the next element.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Subtract",
          "ReadonlyTypeParams": {
            "T": "(float | int | Vector3)"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Math"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Lists"
          ]
        }
      ]
    },
    "d080c9af-402f-4eb9-91d6-9eee945bf734": {
      "ReadonlyName": "List Sum",
      "Description": "Adds each element in the list by the next element.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Sum",
          "ReadonlyTypeParams": {
            "T": "(float | int | Vector3)"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Math"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Lists"
          ]
        }
      ]
    },
    "35f84cfc-b10e-451e-832e-c6ad8d99685d": {
      "ReadonlyName": "Variable (List<Vector3>)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (List<Vector3>)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<Vector3>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "List<Vector3>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Variables",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Variables",
            "Lists",
            "Primitives"
          ]
        }
      ]
    },
    "28a105ab-a947-4493-a51d-ced76a9601ee": {
      "ReadonlyName": "Logarithm",
      "Description": "This chip allows you to use the math formula logarithm",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Logarithm",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Base",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "4047a8cc-3dcc-4fa8-85a7-41d569b8e547": {
      "ReadonlyName": "Log String",
      "Description": "Logs a string to the logging tab of your palette.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Log String",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Text",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Commonly Used"
          ]
        },
        {
          "FilterPath": [
            "Utilities"
          ]
        }
      ]
    },
    "542d3256-0d51-4c33-a2a1-fbc44b7e1f07": {
      "ReadonlyName": "List Create",
      "Description": "Creates a list from input values. Add more inputs by using the configure tool on the node and press “Add Input”. All items in a list must be of the same type.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "List Create",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "Item",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "List",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Core"
          ]
        }
      ]
    },
    "bee72c1d-266b-4ea4-b185-7500618030c6": {
      "ReadonlyName": "Make Tuple",
      "Description": "",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Make Tuple",
          "ReadonlyTypeParams": {
            "T0": "any",
            "T1": "any"
          },
          "Inputs": [
            {
              "Name": "Item 0",
              "ReadonlyType": "T0",
              "Description": ""
            },
            {
              "Name": "Item 1",
              "ReadonlyType": "T1",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Tuple",
              "ReadonlyType": "(T0, T1)",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Utilities"
          ]
        }
      ]
    },
    "1cb807b1-85e7-4c14-b3ae-5775b7873b7d": {
      "ReadonlyName": "Max",
      "Description": "Returns largest of two or more values.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Max",
          "ReadonlyTypeParams": {
            "T": "(int | float)"
          },
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Max",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "bfb1ad17-5ade-4bd8-9c31-6d4b1e47dae3": {
      "ReadonlyName": "Min",
      "Description": "Returns smallest of two or more values.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Min",
          "ReadonlyTypeParams": {
            "T": "(int | float)"
          },
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Min",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "fe462e79-9e9f-4234-b594-7b6c0a69329b": {
      "ReadonlyName": "Modulo",
      "Description": "Outputs the remainder of the first value is divided by the second.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Modulo",
          "ReadonlyTypeParams": {
            "T": "(int | float)"
          },
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Remainder",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "4738d696-d05a-42ee-a182-7641c429ae06": {
      "ReadonlyName": "Multiply",
      "Description": "Multiplies the two input values and outputs the result",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Multiply",
          "ReadonlyTypeParams": {
            "T": "(int | float | Quaternion | Vector3)"
          },
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Product",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "502e86d1-5b3a-4213-97e2-df25836ffcc4": {
      "ReadonlyName": "Nand",
      "Description": "Outputs False only when both inputs are True. If one or both is False, it outputs True.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Nand",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Input",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Logic"
          ]
        }
      ]
    },
    "2891bcb4-a6ab-4a2e-a08d-dd2a55f1cf66": {
      "ReadonlyName": "Nor",
      "Description": "Outputs True when both inputs are False. Otherwise, outputs False.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Nor",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Input",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Logic"
          ]
        }
      ]
    },
    "ff551243-beb4-470e-ab48-9d616818d5e4": {
      "ReadonlyName": "Not",
      "Description": "Outputs the opposite of the input boolean. ",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Not",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Logic"
          ]
        }
      ]
    },
    "b5dcded0-eb2b-468d-a4b9-ffb1054f6214": {
      "ReadonlyName": "Or",
      "Description": "Outputs True if any input is true. Otherwise outputs False.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Or",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Input",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Logic"
          ]
        }
      ]
    },
    "92c05ebc-1967-49a4-94b5-2d01fe1e6b85": {
      "ReadonlyName": "Parse Bool",
      "Description": "Converts the input string to a bool if able.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Parse Bool",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "String",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            },
            {
              "Name": "Parse Success",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Conversions"
          ]
        },
        {
          "FilterPath": [
            "Strings"
          ]
        }
      ]
    },
    "5e25f40a-2b8c-4327-a89c-7a749838da7d": {
      "ReadonlyName": "Parse Float",
      "Description": "Converts the input string to a float if able.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Parse Float",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "String",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Parse Success",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Conversions"
          ]
        },
        {
          "FilterPath": [
            "Strings"
          ]
        }
      ]
    },
    "00b49995-a322-47a3-a32b-5530f2ba7fed": {
      "ReadonlyName": "Parse Int",
      "Description": "Converts the input string to a integer if able.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Parse Int",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "String",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Parse Success",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Conversions"
          ]
        },
        {
          "FilterPath": [
            "Strings"
          ]
        }
      ]
    },
    "5e002bc3-c667-441c-8098-4df2f956de5b": {
      "ReadonlyName": "Piston Get Acceleration",
      "Description": "Gets the acceleration of a piston",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Piston Get Acceleration",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Piston",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Piston"
          ]
        }
      ]
    },
    "e503b0e4-d295-48cc-bf95-1f1a8127a009": {
      "ReadonlyName": "Piston Get Distance",
      "Description": "Outputs the current distance of the target Piston.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Piston Get Distance",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Piston",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Piston"
          ]
        }
      ]
    },
    "639a360e-aeb1-4c5d-8bc1-96bfaea8aef2": {
      "ReadonlyName": "Piston Get Target Distance",
      "Description": "Outputs the set distance of the Marker on a target Piston.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Piston Get Target Distance",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Piston",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Piston"
          ]
        }
      ]
    },
    "bb702e97-9f40-45cb-b35d-3a2193ab6800": {
      "ReadonlyName": "Piston Get Max Distance",
      "Description": "Outputs the max distance of the target Piston.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Piston Get Max Distance",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Piston",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Piston"
          ]
        }
      ]
    },
    "1d989cd3-d6ae-4503-b80e-5e630ec3f308": {
      "ReadonlyName": "Piston Get Speed",
      "Description": "Returns the speed of a piston.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Piston Get Speed",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Piston",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Piston"
          ]
        }
      ]
    },
    "07c316df-cfa1-4ef8-ac3b-d7e9c4795812": {
      "ReadonlyName": "Piston Set Acceleration",
      "Description": "Outputs the acceleration of the target Piston.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Piston Set Acceleration",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Piston",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Piston"
          ]
        }
      ]
    },
    "283cb154-76e8-4d60-9899-2a50b6e4c093": {
      "ReadonlyName": "Piston Set Distance",
      "Description": "Moves a target piston to the input distance.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Piston Set Distance",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Piston",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Piston"
          ]
        }
      ]
    },
    "bf25fab6-14ef-4815-a7db-92d99fc627d3": {
      "ReadonlyName": "Piston Set Target Distance",
      "Description": "Sets the Marker distance of a target Piston.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Piston Set Target Distance",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Piston",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Piston"
          ]
        }
      ]
    },
    "95431866-97f3-43b4-91f3-4bd3574b2b02": {
      "ReadonlyName": "Piston Set Max Distance",
      "Description": "Sets the max distance of a target Piston.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Piston Set Max Distance",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Piston",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Piston"
          ]
        }
      ]
    },
    "419d2d2f-18f8-4223-b2f7-a7d1450c242c": {
      "ReadonlyName": "Piston Set Speed",
      "Description": "Sets the speed of a target Piston.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Piston Set Speed",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Piston",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Piston"
          ]
        }
      ]
    },
    "7b725036-4996-441d-ac54-91ac2c23d6b3": {
      "ReadonlyName": "Player Add Role",
      "Description": "Adds a Role to a player",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Add Role",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "4c9e7840-0721-4d1c-b334-167f79d3bf40": {
      "ReadonlyName": "Player Definition Board",
      "Description": "This is very similar to an object board that you would find on any object, except this is for all players! After placing, make sure to configure it and make sure it is active. Edit into this board and add any other chips you'd like and know that each player will have the same logic on them when you hit done editing. ",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "f0827a17-7d21-45ba-b302-c2b068bd50ca": {
      "ReadonlyName": "Player Get Equipped Objects",
      "Description": "Gets equipped objects from a player.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Get Equipped Objects",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Player",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Main-Hand Object",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            },
            {
              "Name": "Off-Hand Object",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            },
            {
              "Name": "Left Hip Holster Object",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            },
            {
              "Name": "Right Hip Holster Object",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            },
            {
              "Name": "Shoulder Holster Object",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player",
            "Equipment"
          ]
        }
      ]
    },
    "4646dbed-e616-470e-8e0c-eb446b91838b": {
      "ReadonlyName": "Player Get Is Local",
      "Description": "Outputs true if the input player is the local player executing the chip on their machine.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Get Is Local",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Networking"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "9b39ed47-e9a5-4f04-b4cd-80f5bbaff2f7": {
      "ReadonlyName": "Player Has Role",
      "Description": "Outputs true if the input player has the input role.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Has Role",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "c35fe6fe-d231-4ee5-80ff-9e69f24eb29e": {
      "ReadonlyName": "Player Is Authority Of",
      "Description": "Outputs if a player is authority of the input RecRoomObject",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Is Authority Of",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            },
            {
              "Name": "Object",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Networking"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "58c5cab7-ddf7-4de8-86c8-25f3d3c19d98": {
      "ReadonlyName": "Player Is Room Owner",
      "Description": "Outputs true if the input player is one of the current room's owners.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Is Room Owner",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "6b5c4b0b-be26-4055-b26f-1e5f061c63ca": {
      "ReadonlyName": "Player Left Hand Finger Direction",
      "Description": "Outputs the Direction of a player's left hand finger.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Left Hand Finger Direction",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "17e61429-059f-4b29-b8b8-f0bf3179f580": {
      "ReadonlyName": "Player Left Hand Rotation",
      "Description": "Outputs the rotation of a player's left hand.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Left Hand Rotation",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "619b3bc8-bcb9-4812-86f5-f6442cdbb557": {
      "ReadonlyName": "Player Left Hand Position",
      "Description": "Outputs the postion of a player's left hand in world space.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Left Hand Position",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "2607a0fe-f200-4f29-83ae-446db4b8e8ce": {
      "ReadonlyName": "Player Left Hand Velocity",
      "Description": "Outputs the velocity of a player's left hand.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Left Hand Velocity",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "1094590a-ca33-4ca0-8e6b-66d784f4b5d7": {
      "ReadonlyName": "Variable (Player)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (Player)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Variables",
            "Objects"
          ]
        },
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "89981fe2-2e27-4b92-b8c2-c0159b62bccc": {
      "ReadonlyName": "Player Remove Role",
      "Description": "Removes the input role from a target player.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Remove Role",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "646ff790-c930-4565-ae38-99a798271a50": {
      "ReadonlyName": "Player Right Hand Finger Direction",
      "Description": "Outputs the Direction of a player's right hand finger.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Right Hand Finger Direction",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "0afab661-0870-42bb-9256-891f1a876b3b": {
      "ReadonlyName": "Player Right Hand Rotation",
      "Description": "Outputs the rotation of a player's right hand.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Right Hand Rotation",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "e9d3330d-c290-41d5-aa37-cc5e43198836": {
      "ReadonlyName": "Player Right Hand Position",
      "Description": "Outputs the postion of a player's right hand in world space.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Right Hand Position",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "aba06411-9c8c-477a-bc7f-76ab5605c85d": {
      "ReadonlyName": "Player Right Hand Velocity",
      "Description": "Outputs the velocity of a player's right hand.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Right Hand Velocity",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "7e321d9b-4500-4917-9361-a32e1463401c": {
      "ReadonlyName": "Player Subscribes to Room Owner",
      "Description": "Outputs true if the input player subscribes to one of the current room's owners.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Player Subscribes to Room Owner",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "288d4e89-ebed-41ed-a522-4c79bd48471a": {
      "ReadonlyName": "Power",
      "Description": "Multiplies a value by itself an input number of times.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Power",
          "ReadonlyTypeParams": {
            "T": "(int | float)"
          },
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "46e6b40e-2416-4078-b7dc-a0ecc2c2aa20": {
      "ReadonlyName": "Prompt Local Player",
      "Description": "Sends a watch notification to a player. The player which it sends a notification to depends on who's machine fires the exec pin. Once this watch notification is opened, the player can type responses into the text box and send back responses. You can define the prompt title and the prompt itself via inputs, and can also receive the player’s response via an output pin.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Prompt Local Player",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Prompt Title",
              "ReadonlyType": "string",
              "Description": ""
            },
            {
              "Name": "Prompt",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Complete",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Response",
              "ReadonlyType": "string",
              "Description": ""
            },
            {
              "Name": "Failed",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Player"
          ]
        }
      ]
    },
    "d9096fb3-50c6-42f9-93bb-fc6df63d86a8": {
      "ReadonlyName": "Quaternion Create Angle Axis",
      "Description": "Creates a rotation which rotates angle degrees around axis.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Create Angle Axis",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Angle",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Axis",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "e320278c-13f0-4fe3-b838-7e671bdd9b49": {
      "ReadonlyName": "Quaternion Create Euler Angles",
      "Description": "Creates a quaternion from an input Vector3.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Create Euler Angles",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Angles",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "1069c5de-c7e3-40e0-bd90-52135873b36d": {
      "ReadonlyName": "Quaternion Create From To",
      "Description": "Creates a rotation which rotates from fromDirection to toDirection.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Create From To",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "From",
              "ReadonlyType": "Vector3",
              "Description": ""
            },
            {
              "Name": "To",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "b28f369d-6758-4afc-80e2-8f09ea1df125": {
      "ReadonlyName": "Quaternion Create Look",
      "Description": "Creates a rotation with the specified forward and upwards directions.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Create Look",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Forward",
              "ReadonlyType": "Vector3",
              "Description": ""
            },
            {
              "Name": "Upwards",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "cff17d2a-4333-41da-81ac-2825f25bf819": {
      "ReadonlyName": "Quaternion Create",
      "Description": "Manually create a quaternion. Congratulations, you have reached peak math.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Create",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "X",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Y",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Z",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "W",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Quaternion",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "268d931e-172b-48e8-8eb8-8ec2a9614f0d": {
      "ReadonlyName": "Quaternion Dot",
      "Description": "The dot product between two rotations.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Dot",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Lhs",
              "ReadonlyType": "Quaternion",
              "Description": ""
            },
            {
              "Name": "Rhs",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "81048ea5-2778-4816-99c5-1c50faad8a87": {
      "ReadonlyName": "Quaternion Euler Angles",
      "Description": "Outputs the input quaternion as a vector3.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Euler Angles",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "b415c3ce-5f9f-472b-8d70-daeb728b7c2d": {
      "ReadonlyName": "Quaternion Get Angle Axis",
      "Description": "Gets the rotation which rotates angle degrees around axis.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Get Angle Axis",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Quaternion",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Angle",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Axis",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "2097bef3-9ed1-4601-ab5d-f620654bd1c4": {
      "ReadonlyName": "Quaternion Inverse",
      "Description": "Outputs the Inverse of rotation.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Inverse",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "18a980ff-9a46-472c-b658-96bf42eb61c2": {
      "ReadonlyName": "Variable (Quaternion)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (Quaternion)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Variables",
            "Primitives"
          ]
        }
      ]
    },
    "8157b896-fce8-45fc-957a-4407f0d6c42a": {
      "ReadonlyName": "Quaternion Normalize",
      "Description": "Outputs the input quaternion with the same rotation but with a magnitude of 1.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Normalize",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "edfe7cbb-6973-4489-9b7a-75746243dd6d": {
      "ReadonlyName": "Quaternion Rotate Towards",
      "Description": "Rotates a rotation \"from\" towards \"to\".",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Rotate Towards",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "From",
              "ReadonlyType": "Quaternion",
              "Description": ""
            },
            {
              "Name": "To",
              "ReadonlyType": "Quaternion",
              "Description": ""
            },
            {
              "Name": "MaxDegreesDelta",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "02c4048a-5f67-47ea-9f00-692f51c66e65": {
      "ReadonlyName": "Rotate Vector",
      "Description": "Rotate a Vector3 with a Quaternion.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rotate Vector",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Rotation",
              "ReadonlyType": "Quaternion",
              "Description": ""
            },
            {
              "Name": "Point",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "8d5f0586-1ecf-42ba-a34f-c6ccbb0eadb9": {
      "ReadonlyName": "Quaternion Slerp",
      "Description": "Spherically interpolates between quaternions a and b. Progress is 0 to 1. Also a rare, but refreshing beverage.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Slerp",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Start",
              "ReadonlyType": "Quaternion",
              "Description": ""
            },
            {
              "Name": "End",
              "ReadonlyType": "Quaternion",
              "Description": ""
            },
            {
              "Name": "Progress",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "1d2a37e1-428e-4385-bc96-4ad5adff0a05": {
      "ReadonlyName": "Quaternion Split",
      "Description": "Split a quaternion into its four float components: x, y, z, and w. Congratulations, you have reached peak math.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Quaternion Split",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Quaternion",
              "ReadonlyType": "Quaternion",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "X",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Y",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Z",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "W",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Quaternion"
          ]
        }
      ]
    },
    "4ecbf247-ab14-4f9e-8094-e40a45d283e6": {
      "ReadonlyName": "Random Float",
      "Description": "Generates a random float from [min to max]. Min is inclusive, and max is also inclusive. For example with a min of 0 and a max of 1, both 0 and 1 have the possibility of getting output because they are both included in the range.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Random Float",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Min (Inclusive)",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Max (Inclusive)",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "0b18cef3-0ea5-4e3c-a0d5-c460f03dbe8c": {
      "ReadonlyName": "Random From List",
      "Description": "Outputs a random value from a target list.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Random From List",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "List",
              "ReadonlyType": "List<T>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists"
          ]
        }
      ]
    },
    "fb2645f0-4042-4ef1-b988-af2f80e651ec": {
      "ReadonlyName": "Random Int",
      "Description": "Generates a random integer from [min to max). Min is inclusive, and max is exclusive. For example with a min of 0 and a max of 1, 1 will never get output because it is excluded from the range.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Random Int",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Min (Inclusive)",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Max (Inclusive)",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "f8db4ba2-7380-49a0-a0ba-bcdca11fec96": {
      "ReadonlyName": "Reroute",
      "Description": "Used to remove spaghetti from your creations.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Commonly Used"
          ]
        }
      ]
    },
    "6ba175cf-493a-4790-b916-57259f94cd98": {
      "ReadonlyName": "Reset Object",
      "Description": "Resets a Rec Room Object.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Reset Object",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Object",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Reset Object",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rec Room Object"
          ]
        }
      ]
    },
    "e921b08d-10c2-4be4-86fe-b8c7155cb97b": {
      "ReadonlyName": "Reset Room",
      "Description": "Resets the Room.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Reset Room",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ],
          "Outputs": []
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Utilities"
          ]
        }
      ]
    },
    "117b8c83-5ada-4665-a0c6-2c6ffdec98b9": {
      "ReadonlyName": "Rotator Get Target Rotation",
      "Description": "Outputs the rotation of the Marker on the target Rotator.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rotator Get Target Rotation",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Rotator",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rotator"
          ]
        }
      ]
    },
    "2d96da47-4d37-4463-a3bd-8f8cd2ab0c58": {
      "ReadonlyName": "Rotator Get Rotation Acceleration",
      "Description": "Outputs the acceleration of a target Rotator.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rotator Get Rotation Acceleration",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Rotator",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rotator"
          ]
        }
      ]
    },
    "30fe0829-2f08-4bd2-b4b1-9a41764e5a76": {
      "ReadonlyName": "Rotator Get Rotation",
      "Description": "Outputs the rotation of a target Rotator in degrees.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rotator Get Rotation",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Rotator",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rotator"
          ]
        }
      ]
    },
    "be834de9-91cb-4588-8988-3a6abfd56573": {
      "ReadonlyName": "Rotator Get Rotation Speed",
      "Description": "Outputs the speed of a target Rotator.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rotator Get Rotation Speed",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Rotator",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rotator"
          ]
        }
      ]
    },
    "0f9da436-0752-422d-8323-fa445a9ca06b": {
      "ReadonlyName": "Rotator Set Target Rotation",
      "Description": "Sets the rotation of the Marker on a target Rotator.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rotator Set Target Rotation",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Rotator",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rotator"
          ]
        }
      ]
    },
    "db29fd41-9fb5-4c2a-8c72-c8d327b0f23f": {
      "ReadonlyName": "Rotator Set Rotation Acceleration",
      "Description": "Sets the acceleration of a target Rotator.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rotator Set Rotation Acceleration",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Rotator",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rotator"
          ]
        }
      ]
    },
    "07ae26b8-e0d7-49c0-bb2c-25d66d31fe3c": {
      "ReadonlyName": "Rotator Set Rotation",
      "Description": "Sets the rotation of a target Rotator.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rotator Set Rotation",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Rotator",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rotator"
          ]
        }
      ]
    },
    "9d0e3cf5-581d-4fb5-8346-c9e7d9877b3f": {
      "ReadonlyName": "Rotator Set Rotation Speed",
      "Description": "Sets the speed of a target Rotator.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Rotator Set Rotation Speed",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Rotator",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rotator"
          ]
        }
      ]
    },
    "c6cfe49a-4ffb-4714-9564-8ddda0300676": {
      "ReadonlyName": "Round",
      "Description": "Rounds the input float up.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Round",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        }
      ]
    },
    "0d2a4771-0694-4b84-8e07-2080c26aae22": {
      "ReadonlyName": "Round to Int",
      "Description": "Rounds an input value to the nearest integer.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Round to Int",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        },
        {
          "FilterPath": [
            "Conversions"
          ]
        }
      ]
    },
    "7fc01b3a-3f44-4cf1-ad2d-d5898fb35f4d": {
      "ReadonlyName": "Seat Get Seated Player",
      "Description": "Outputs the currently seated player of a target Seat.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Seat Get Seated Player",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Seat",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Player",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Seats"
          ]
        }
      ]
    },
    "af071963-a0df-422e-8372-e561336921db": {
      "ReadonlyName": "Seat Set Lock Players In",
      "Description": "Prevents a Seated player from unseating themselves on a target Seat. Must use circuits to Unseat.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Seat Set Lock Players In",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Seat",
              "Description": ""
            },
            {
              "Name": "Lock Players In",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Seats"
          ]
        }
      ]
    },
    "face947c-8ac1-4d8e-8318-e7ec98bf466d": {
      "ReadonlyName": "Seat Set Lock Players Out",
      "Description": "Prevents players from sitting in a target seat.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Seat Set Lock Players Out",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Seat",
              "Description": ""
            },
            {
              "Name": "Lock Players Out",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Seats"
          ]
        }
      ]
    },
    "d652ebe5-1367-44ed-a352-1e5ab84c32b0": {
      "ReadonlyName": "Seat Set Seated Player",
      "Description": "Seats an input player on a target Seat.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Seat Set Seated Player",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Seat",
              "Description": ""
            },
            {
              "Name": "Player",
              "ReadonlyType": "Player",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Success",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Fail",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Seats"
          ]
        }
      ]
    },
    "70b682f5-5744-4a6a-beaa-a9dcd40066b6": {
      "ReadonlyName": "Seat Unseat Player",
      "Description": "Unseats a currently seated player on a target Seat.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Seat Unseat Player",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Seat",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Seats"
          ]
        }
      ]
    },
    "3d7d40d6-885a-4fa5-bbaa-b19057291ddb": {
      "ReadonlyName": "Self",
      "Description": "Outputs the object (and type) of the current context. For example, a self node inside a light outputs that specific light of the light type. This can only be placed inside an object board of a specific object.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Self",
          "ReadonlyTypeParams": {},
          "Inputs": [],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Utilities"
          ]
        }
      ]
    },
    "88daacc5-7652-4d3a-b505-ba256ce3fd9d": {
      "ReadonlyName": "Set Element",
      "Description": "Sets a value at a location in a list",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Set Element",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "List",
              "ReadonlyType": "List<T>",
              "Description": ""
            },
            {
              "Name": "Index",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Lists",
            "Core"
          ]
        }
      ]
    },
    "aaf39143-c5dc-47cd-ad85-c659c3035cab": {
      "ReadonlyName": "SFX Get Volume",
      "Description": "Outputs the volume of an SFX Component",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "SFX Get Volume",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "SFX",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "SFX"
          ]
        }
      ]
    },
    "a0a17fe1-bdb0-4687-81de-141ce97710ed": {
      "ReadonlyName": "SFX IsPlaying",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "SFX IsPlaying",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "SFX",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "SFX"
          ]
        }
      ]
    },
    "5f8991bb-d1b8-4c74-a54a-86e7033b53a0": {
      "ReadonlyName": "SFX Play",
      "Description": "Plays a sound from an SFX Component",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "SFX Play",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "SFX",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "SFX"
          ]
        }
      ]
    },
    "d2df4993-d858-4df1-aca2-fc0e7f479668": {
      "ReadonlyName": "SFX Set Volume",
      "Description": "Sets the volume for an SFX Component",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "SFX Set Volume",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "SFX",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "SFX"
          ]
        }
      ]
    },
    "3ad57fda-1fab-4b00-81b3-71d61af37c65": {
      "ReadonlyName": "SFX Stop",
      "Description": "Stops the sound currently playing from an SFX Component",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "SFX Stop",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "SFX",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "SFX"
          ]
        }
      ]
    },
    "61bc2310-69f5-4dfa-b43c-12ae98dd05ab": {
      "ReadonlyName": "Show Notification",
      "Description": "Prints the input notification to a player’s screen if the node is run on a player's machine.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Show Notification",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Utilities"
          ]
        }
      ]
    },
    "ea824326-5061-411d-980c-30031511c821": {
      "ReadonlyName": "Sin",
      "Description": "This chip allows you to use the math formula sin",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Sin",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Trigonometry"
          ]
        }
      ]
    },
    "6a669e6e-4ebf-434c-9c23-d2b769d49b47": {
      "ReadonlyName": "Spawner Reset",
      "Description": "",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Spawner Reset",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Spawner"
          ]
        }
      ]
    },
    "fb6a63b1-3f55-4dcf-9bf0-6ef82e3296d5": {
      "ReadonlyName": "Spawner Internal Start Spawning",
      "Description": "",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Spawner Internal Start Spawning",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Spawner",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            },
            {
              "Name": "Amount of objects to spawn",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Time between spawns",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Spawn Position",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Spawner"
          ]
        }
      ]
    },
    "aa24edab-c707-4cff-8c73-07e479b4cd07": {
      "ReadonlyName": "String Contains",
      "Description": "Outputs true if the target string contains the input value.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "String Contains",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "String",
              "ReadonlyType": "string",
              "Description": ""
            },
            {
              "Name": "Sequence",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Strings"
          ]
        }
      ]
    },
    "77afc9dd-baa9-4312-b8b8-7ef479c840e6": {
      "ReadonlyName": "String Format",
      "Description": "Use this node to combine multiple strings together into a single string output. The Format input is part of final string output and can include other string inputs by using this syntax: {input pin # starting at 0}. For example, a Format input with a default value of “Hello, {0}!” with a single additional input pin with the value “World” is fully output as “Hey, World!”. If you had another input pin you would use {1} to denote the 2nd pin. You can add more string inputs by configuring the node and pressing “Add Input”.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "String Format",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Format",
              "ReadonlyType": "string",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "string",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Strings"
          ]
        },
        {
          "FilterPath": [
            "Commonly Used"
          ]
        }
      ]
    },
    "dcde9345-00f2-41fb-9a2d-5a938f39bfb5": {
      "ReadonlyName": "String Length",
      "Description": "Outputs the length of a target string.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "String Length",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "String",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Length",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Strings"
          ]
        }
      ]
    },
    "66b6ea20-9a00-4f80-9636-2cfb676b3965": {
      "ReadonlyName": "Variable (string)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (string)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "string",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Variables",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Strings"
          ]
        }
      ]
    },
    "ad169649-1050-48c5-a540-f03a2059bcdb": {
      "ReadonlyName": "String Split",
      "Description": "Splits the target string at the input character.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "String Split",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "String",
              "ReadonlyType": "string",
              "Description": ""
            },
            {
              "Name": "Divider",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "List",
              "ReadonlyType": "List<string>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Strings"
          ]
        }
      ]
    },
    "6b92c345-e6bc-40d9-aae9-4754e634777c": {
      "ReadonlyName": "String Split At Index",
      "Description": "Splits the target string in half at the input index.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "String Split At Index",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "String",
              "ReadonlyType": "string",
              "Description": ""
            },
            {
              "Name": "Index",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "List",
              "ReadonlyType": "List<string>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Strings"
          ]
        }
      ]
    },
    "1af21999-38f8-4231-9de9-26b43f47fe0d": {
      "ReadonlyName": "String Substring Index",
      "Description": "Outputs the index where the substring starts in the target string.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "String Substring Index",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "String",
              "ReadonlyType": "string",
              "Description": ""
            },
            {
              "Name": "Substring",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Index",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Strings"
          ]
        }
      ]
    },
    "678f6d33-1e94-4be6-b959-0212c1a2207f": {
      "ReadonlyName": "String To Lower",
      "Description": "Outputs the target string in lower case.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "String To Lower",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "String",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "string",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Strings"
          ]
        }
      ]
    },
    "8f5995c7-5af0-4064-9cb7-2b80d75d157f": {
      "ReadonlyName": "String To Upper",
      "Description": "Outputs the target string in upper case.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "String To Upper",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "String",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "string",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Strings"
          ]
        }
      ]
    },
    "226fafe2-1ea8-4ae8-861e-ae4b1bd10bfe": {
      "ReadonlyName": "Substring",
      "Description": "Allows you to extract individual characters from a string. You can think of this like a list of characters.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Substring",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "String",
              "ReadonlyType": "string",
              "Description": ""
            },
            {
              "Name": "Index",
              "ReadonlyType": "int",
              "Description": ""
            },
            {
              "Name": "Length",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "string",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Strings"
          ]
        }
      ]
    },
    "1fbb364c-1af0-44bb-a82b-905caeb6819a": {
      "ReadonlyName": "Subtract",
      "Description": "Takes one input value away from the other.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Subtract",
          "ReadonlyTypeParams": {
            "T": "(int | float | Vector3)"
          },
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Difference",
              "ReadonlyType": "T",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Scalar"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        }
      ]
    },
    "13dbbd78-11c0-4b4f-9098-1ef59e584324": {
      "ReadonlyName": "Tan",
      "Description": "This chip allows you to use the math formula tan",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Tan",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Trigonometry"
          ]
        }
      ]
    },
    "20b2528d-96a9-4be8-9782-aa75959f5232": {
      "ReadonlyName": "Text Set Color",
      "Description": "Sets the color for a Text Component",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Text Set Color",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Text",
              "Description": ""
            },
            {
              "Name": "Color",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Text"
          ]
        }
      ]
    },
    "ef6fcf56-1b3f-42bc-af50-019ff0a9cfc5": {
      "ReadonlyName": "Text Set Material",
      "Description": "Sets the material for a Text Component",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Text Set Material",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Text",
              "Description": ""
            },
            {
              "Name": "Material",
              "ReadonlyType": "int",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Text"
          ]
        }
      ]
    },
    "c941f3a3-d3f6-49cc-a6a4-b7a4e95fd173": {
      "ReadonlyName": "Text Set Text",
      "Description": "Set the visible text for a Text Component",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Text Set Text",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Text",
              "Description": ""
            },
            {
              "Name": "Text",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Text"
          ]
        }
      ]
    },
    "75a3a9c2-da17-4762-b87b-1735b44af659": {
      "ReadonlyName": "To Combatant",
      "Description": "Covert a player or an AI value into a Combatant value",
      "IsBetaChip": true,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "To Combatant",
          "ReadonlyTypeParams": {
            "T": "(AI | Player)"
          },
          "Inputs": [
            {
              "Name": "Player or AI",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Combatant",
              "ReadonlyType": "Combatant",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Combatant"
          ]
        }
      ]
    },
    "315a494e-84cc-4e3c-acff-389bb932b5d0": {
      "ReadonlyName": "To Rec Room Object",
      "Description": "Outputs the target specific object to a Rec Room Object.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "To Rec Room Object",
          "ReadonlyTypeParams": {
            "T": "Rec Room Object"
          },
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Rec Room Object",
              "ReadonlyType": "Rec Room Object",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Rec Room Object"
          ]
        },
        {
          "FilterPath": [
            "Conversions"
          ]
        }
      ]
    },
    "f8a9cb84-dcb1-4a12-ae29-4d7711e14506": {
      "ReadonlyName": "Toggle Button Get Is Pressed",
      "Description": "Outputs true if the toggle button is pressed",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Toggle Button Get Is Pressed",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Toggle Button",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Is Pressed",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Toggle Button"
          ]
        }
      ]
    },
    "fdfb3857-3d13-4d66-9a05-f88586e9f821": {
      "ReadonlyName": "Toggle Button Set Is Pressed",
      "Description": "Sets a Toggle Button state to pressed",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Toggle Button Set Is Pressed",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Toggle Button",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "bool",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Toggle Button"
          ]
        }
      ]
    },
    "74e81edb-84bd-4e52-b2f3-a73a62a6b3aa": {
      "ReadonlyName": "To String",
      "Description": "Converts the input value to the string type. Example: the integer input 10 would output “10” as a string. Helpful for debugging purposes.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "To String",
          "ReadonlyTypeParams": {
            "T": "any"
          },
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result ",
              "ReadonlyType": "string",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Utilities"
          ]
        },
        {
          "FilterPath": [
            "Strings"
          ]
        },
        {
          "FilterPath": [
            "Commonly Used"
          ]
        }
      ]
    },
    "b49c4e16-93c5-45c3-b457-fb960c661bc5": {
      "ReadonlyName": "Trigger Volume Get Filter Role",
      "Description": "Gets the Role that is being filterd from a Trigger Volume",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Trigger Volume Get Filter Role",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Trigger Volume",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "string",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Trigger Volume"
          ]
        }
      ]
    },
    "8f42f9b7-87fb-4f4b-9160-a45baf269650": {
      "ReadonlyName": "Trigger Volume Get Filter Tags",
      "Description": "Gets the Tags that are being filterd from a Trigger Volume",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Trigger Volume Get Filter Tags",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Trigger Volume",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "List<string>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Trigger Volume"
          ]
        }
      ]
    },
    "338c7e0a-fa55-49e1-91e8-1609d00f1fd0": {
      "ReadonlyName": "Trigger Volume Get Num Objects",
      "Description": "Gets the number of objects inside a Trigger Volume",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Trigger Volume Get Num Objects",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Trigger Volume",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Trigger Volume"
          ]
        }
      ]
    },
    "4cbe661b-7053-4c19-9ccf-1600c7a41016": {
      "ReadonlyName": "Trigger Volume Get Num Players",
      "Description": "Gets the number of players inside a Trigger Volume",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Trigger Volume Get Num Players",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Trigger Volume",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "int",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Trigger Volume"
          ]
        }
      ]
    },
    "530932a7-8781-4b09-a945-b33af6675809": {
      "ReadonlyName": "Trigger Volume Get Objects",
      "Description": "Gets all of the objects inside a Trigger Volume",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Trigger Volume Get Objects",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Trigger Volume",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "List<Rec Room Object>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Trigger Volume"
          ]
        }
      ]
    },
    "4c23af85-e05c-4be7-a708-c2f0cc67ebec": {
      "ReadonlyName": "Trigger Volume Get Players",
      "Description": "Gets all of the players inside a Trigger Volume",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Trigger Volume Get Players",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Target",
              "ReadonlyType": "Trigger Volume",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Value",
              "ReadonlyType": "List<Player>",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Trigger Volume"
          ]
        }
      ]
    },
    "55cfecf9-2623-4aad-948c-6ca89f11911b": {
      "ReadonlyName": "Trigger Volume Set Filter Role",
      "Description": "Sets the filterd Role for the Trigger Volume",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Trigger Volume Set Filter Role",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Trigger Volume",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "string",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Trigger Volume"
          ]
        }
      ]
    },
    "6668fd38-076e-4d03-b9a1-02eca5edd0b7": {
      "ReadonlyName": "Trigger Volume Set Filter Tags",
      "Description": "Sets the filterd Tags for a Trigger Volume",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Trigger Volume Set Filter Tags",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "Target",
              "ReadonlyType": "Trigger Volume",
              "Description": ""
            },
            {
              "Name": "Value",
              "ReadonlyType": "List<string>",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Trigger Volume"
          ]
        }
      ]
    },
    "6bd92538-6889-41f3-b819-9511e6f81944": {
      "ReadonlyName": "Vector3 Cross",
      "Description": "The cross product of two vectors results in a third vector which is perpendicular to the two input vectors.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Vector3 Cross",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Lhs",
              "ReadonlyType": "Vector3",
              "Description": ""
            },
            {
              "Name": "Rhs",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        }
      ]
    },
    "498c4e25-f73b-49a6-912e-ae148ed50dca": {
      "ReadonlyName": "Vector3 Dot",
      "Description": "Commonly used to determine if the camera is facing a particular direction.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Vector3 Dot",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Lhs",
              "ReadonlyType": "Vector3",
              "Description": ""
            },
            {
              "Name": "Rhs",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        }
      ]
    },
    "fba2accf-44e2-412d-a204-ae3bd04f7dfa": {
      "ReadonlyName": "Variable (Vector3)",
      "Description": "",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 1,
      "NodeDescs": [
        {
          "Name": "Variable (Vector3)",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "",
              "ReadonlyType": "exec",
              "Description": ""
            },
            {
              "Name": "",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Variables",
            "Primitives"
          ]
        },
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        }
      ]
    },
    "92ded211-17d6-4c73-b29c-71323c6a40ee": {
      "ReadonlyName": "Vector3 Normalize",
      "Description": "Outputs the target vector, but its magnitude is 1.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Vector3 Normalize",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        }
      ]
    },
    "87aa17b1-7760-4b07-8c44-a2d530590597": {
      "ReadonlyName": "Vector3 Scale",
      "Description": "Multiplies two vectors.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Vector3 Scale",
          "ReadonlyTypeParams": {
            "T": "(int | float)"
          },
          "Inputs": [
            {
              "Name": "Value",
              "ReadonlyType": "Vector3",
              "Description": ""
            },
            {
              "Name": "Scalar",
              "ReadonlyType": "T",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Result",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        }
      ]
    },
    "814e9337-7542-4851-9da0-c73885ab0b4f": {
      "ReadonlyName": "Vector Create",
      "Description": "Creates a new vector from X, Y, Z values.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Vector Create",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "X",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Y",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Z",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        }
      ]
    },
    "74ba9189-2880-46fa-b4b0-3c9a7152489e": {
      "ReadonlyName": "Vector Gadget Get Vector",
      "Description": "Gets the direction and magnitude of the Vector Component",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Vector Gadget Get Vector",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Direction",
              "ReadonlyType": "Vector",
              "Description": ""
            },
            {
              "Name": "Magnitude",
              "ReadonlyType": "float",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Objects",
            "Vector Gadget"
          ]
        }
      ]
    },
    "c3b9ba98-6c4a-44c2-9125-043314fba4a6": {
      "ReadonlyName": "Vector Get Magnitude",
      "Description": "Outputs the length of the input vector.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Vector Get Magnitude",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "Magnitude",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        }
      ]
    },
    "2d677241-61b7-45d2-aec2-4a302e3483a0": {
      "ReadonlyName": "Vector Split",
      "Description": "Breaks the X, Y, and Z values out of the input vector.",
      "IsBetaChip": false,
      "DeprecationStage": 0,
      "NameSource": 0,
      "NodeDescs": [
        {
          "Name": "Vector Split",
          "ReadonlyTypeParams": {},
          "Inputs": [
            {
              "Name": "Vector",
              "ReadonlyType": "Vector3",
              "Description": ""
            }
          ],
          "Outputs": [
            {
              "Name": "X",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Y",
              "ReadonlyType": "float",
              "Description": ""
            },
            {
              "Name": "Z",
              "ReadonlyType": "float",
              "Description": ""
            }
          ]
        }
      ],
      "NodeFilters": [
        {
          "FilterPath": [
            "Math",
            "Vector"
          ]
        }
      ]
    }
  }
}
